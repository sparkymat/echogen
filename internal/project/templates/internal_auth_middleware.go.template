package auth

import (
	"context"
	"errors"
	"net/http"

	"github.com/labstack/echo/v4"
	"{{.ProjectURL}}/internal/dbx"
  "github.com/google/uuid"
)

const (
	UserKey = "user"
)

var ErrTokenMissing = errors.New("token missing")

const ClientNameKey = "client_name"

type ConfigService interface {
  JWTSecret() string
  ProxyAuthNameHeader() string
  ProxyAuthEmailHeader() string
}

type UserService interface {
  CreateUser(ctx context.Context, name string, email string, encryptedPassword string) (dbx.User, error)
  FetchUserByEmail(ctx context.Context, email string) (dbx.User, error)
	FetchUserByID(ctx context.Context, userID uuid.UUID) (dbx.User, error)
}

func Middleware(cfg ConfigService, userService UserService) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			err := sessionAuth(c, cfg, userService)
			if err == nil {
				return next(c)
			}

			return c.Redirect(http.StatusSeeOther, "/login")
		}
	}
}

func APIMiddleware(cfg ConfigService, userService UserService) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			err := sessionAuth(c, cfg, userService)
			if err == nil {
				return next(c)
			}

			return c.Redirect(http.StatusSeeOther, "/login")
		}
	}
}

func sessionAuth(c echo.Context, cfg ConfigService, userService UserService) error {
	userID, err := LoadUserIDFromSession(cfg.JWTSecret(), c)
	if err != nil {
		return err
	}

	user, err := userService.FetchUserByID(c.Request().Context(), userID)
	if err != nil {
		return err //nolint:wrapcheck
	}

	c.Set(UserKey, user)

	return nil
}
